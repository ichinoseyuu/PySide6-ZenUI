from PySide6.QtWidgets import *
from PySide6.QtCore import *
from PySide6.QtGui import *
from ZenUI.component.container.box import ZenContainer
from ZenUI.core import Zen, ZenExpAnim
class ZenSidebar(ZenContainer):
    '''可折叠侧边栏类'''
    def __init__(self,
                 parent: QWidget = None,
                 name: str = None,
                 state = Zen.State.Collapsed,
                 dir = Zen.Direction.Horizontal,
                 size: tuple[int, int] = (0, 150),
                 layout = Zen.Layout.Vertical):
        super().__init__(parent, name, layout)
        self._state = state
        self._collapse_dir = dir
        self._collapse_width = size[0]
        self._expand_width = size[1]
        self.setMinimumWidth(self._collapse_width)
        self.setMaximumWidth(self._collapse_width)


    def _init_anim(self):
        super()._init_anim()
        self._anim_collapse = QPropertyAnimation(self, b"collapse")
        self._anim_collapse.setDuration(250)
        self._anim_collapse.setEasingCurve(QEasingCurve.OutCubic)
        self._anim_group.addMember(self._anim_collapse,'collapse')


    def _updateSize(self):
        '''切换折叠方向和更改折叠尺寸时需要更新控件'''
        if self._collapse_dir == Zen.Direction.Horizontal:
            self.setMinimumSize(self._collapse_width, 0)
            self.setMaximumSize(self._collapse_width, 32768)
        else:
            self.setMinimumSize(0, self._collapse_width)
            self.setMaximumSize(32768, self._collapse_width)
        for child in self.children():
            if isinstance(child, ZenSidebar):
                child._updateSize()
                print('update size')


    def _playCollapseAnim(self, end: int):
        '''播放折叠动画'''
        self._anim_collapse.stop()
        if self._collapse_dir == Zen.Direction.Horizontal:
            self._anim_collapse.setStartValue(self.width())
        else:
            self._anim_collapse.setStartValue(self.height())
        self._anim_collapse.setEndValue(end)
        self._anim_collapse.start()


    @Property(int)
    def expandWidth(self):
        '''获取展开宽度'''
        return self._expand_width

    @expandWidth.setter
    def expandWidth(self, width: int):
        '''设置展开宽度'''
        self._expand_width = width


    @Property(int)
    def collapseWidth(self):
        '''获取折叠宽度'''
        return self._collapse_width

    @collapseWidth.setter
    def collapseWidth(self, width: int):
        '''设置折叠宽度'''
        self._collapse_width = width
        self._updateSize()


    @Property(Zen.Direction)
    def collapseDir(self):
        '''获取折叠方向'''
        return self._collapse_dir

    @collapseDir.setter
    def collapseDir(self, dir: Zen.Direction):
        '''设置折叠方向'''
        self._collapse_dir = dir
        self._updateSize()



    @Property(int)
    def collapse(self):
        pass

    @collapse.setter
    def collapse(self, value):
        if self._collapse_dir == Zen.Direction.Horizontal:
            self.setMinimumWidth(value)
            self.setMaximumWidth(value)
        else:
            self.setMinimumHeight(value)
            self.setMaximumHeight(value)


    def toggleState(self):
        '''切换状态'''
        if self._state == Zen.State.Normal:
            self._playCollapseAnim(self._collapse_width)
            self._state = Zen.State.Collapsed
            print(f'{self.objectName()} collapse')
        else:
            self._playCollapseAnim(self._expand_width)
            self._state = Zen.State.Normal
            print(f'{self.objectName()} expand')
        # self.pirntValue()


    def pirntValue(self):
        print(f'state: {self._state}')
        print(f'collapse_dir: {self._collapse_dir}')
        print(f'collapse_width: {self._collapse_width}')
        print(f'expand_width: {self._expand_width}')
        print(f'gemoetry: {self.geometry()}')